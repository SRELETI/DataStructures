import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Test1 {

	public static void main(String args[]) {
	/* Test Case for Mincoins problem:
	 * int[] coins = {10,20,50};
	 * int sum = 100;
	 * System.out.println(minCoins(sum,coins));
	 */
	System.out.println(kmpSubString("test","thisisatesttext"));
	
	}
	
	/*
	 * Minimum number of coins required to make a given value.
	 */
	public static int minCoins(int sum, int[] coins) {
		int[] sums = new int[sum+1];
		// initially max no of coins required to form each sum is Infinite. 
		Arrays.fill(sums,Integer.MAX_VALUE);
		// Zero number of coins required to form sum of zero.
		sums[0] = 0;
		// Use DP to compute min coins req for smaller sums. 
		for(int i=1;i<=sum;i++) {
			for(int j=0;j<coins.length;j++) {
				if(coins[j]<=i && sums[i-coins[j]] != Integer.MAX_VALUE && 1+sums[i-coins[j]]<sums[i])
					sums[i] = 1 + sums[i-coins[j]];
			}
		}
		return sums[sum];
	}
	
	
	public static int isSubString(String s1, String s2) {
		for(int i=0;i<s2.length()-s1.length();i++) {
			int j=0;
			for(;j<s1.length();j++) {
				if(s2.charAt(i+j) != s1.charAt(j))
					break;
			}
			if(j==s1.length())
				return i;
		}
		return -1;
	}
	
	public static boolean kmpSubString(String pat, String text) {
		if(pat == null) return true;
		if(text == null) return false;
		if(pat.length()>text.length()) return false;
		if(pat.equals(text)) return true;
		int[] lps = preProcessPat(pat);
		int i = 0;
		int j=0;
		while(i<=text.length()-pat.length()) {
			while(j<pat.length()) {
				if(pat.charAt(j) != text.charAt(i+j))
					break;
				i++;
				j++;
				System.out.println(i+" "+j);
			}
			if(j==pat.length()) {
				System.out.println("Found at index "+(i-j));
				j=0;
				return true;
			}
			else {
				if(j!=0) 
					j = lps[j-1];
				else {
					i++;
				}
			}
		}
		return false;
	}
	
	private static int[] preProcessPat(String pat) {
		int[] lps = new int[pat.length()];
		lps[0] = 0;
		int len = 0;
		int i = 1;
		while(i<pat.length()) {
			if(pat.charAt(i)==pat.charAt(len)) {
				len++;
				lps[i] = len;
				i++;
			}
			else {
				if(len != 0){
					len = lps[len-1];
				}
				else {
					lps[i] = 0;
					i++;
				}
			}
		}
		return lps;
	}
	
	
}
